// 给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
// 数组中的每个元素代表你在该位置可以跳跃的最大长度。

// 判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。

 

// 示例 1：

// 输入：nums = [2,3,1,1,4]
// 输出：true
// 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
// 示例 2：

// 输入：nums = [3,2,1,0,4]
// 输出：false
// 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canJump = function(nums) {
  // 反过来推
  // 看倒数第二位的能否跳到终点 ->  不行的话，再看倒数第三个能否跳到终点，直到所有的数都遍历完
  // 若可以跳跃的到终点的话，则将终点位置换到当前的起始位置
  // 如果终点索引还不为0的话，代表不能跳跃。

  const len = nums.length - 1
  // 初始 end 是数组最后一位的索引值
  let end = nums.length - 1 
  // 初始 i 是倒数第二个位置的索引值
  for (let i = len - 1; i >= 0; i--) {
    if ( i + nums[i] >= end) {
      end = i
    }
  }

  return end === 0
};


console.log(canJump([3,2,1,1,4]))